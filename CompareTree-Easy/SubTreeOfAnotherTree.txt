/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
       boolean result = false;
       TreeNode root = findRootInTree(s,t);
            if(root != null && root.val == t.val){
                result = compareTree(root,t);
           }else{
                return false;
            }
        if(result == false){
            result = isSubtree(s.left,t) || isSubtree(s.right,t);
        }
            
        return result;
    }
     public TreeNode findRootInTree(TreeNode s, TreeNode t){
        TreeNode result = null;
        if(s == null) return null;
        if(s.val == t.val) return s;
        else{
            result =  findRootInTree(s.left,t);
            if(result == null){
                result = findRootInTree(s.right,t);
            }
        }
        return result;
    }
   public boolean compareTree(TreeNode s, TreeNode t){
        if(s == null && t == null) {
            return true;
        }else if(s == null || t == null) {
            return false;
        }
        if(s.val == t.val){
            return compareTree(s.left,t.left) && compareTree(s.right,t.right);
        }
        return false;
        
   }
}